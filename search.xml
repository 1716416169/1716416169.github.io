<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux环境下安装与操作mysql</title>
    <url>/2019/12/12/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E6%93%8D%E4%BD%9Cmysql/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文用于在linux（Centos7）环境下安装mysql</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>首先，你得创建一个下载mysql的文件夹</p>
<p>​    mkdir mysql</p>
<p>然后进到这个文件夹中</p>
<p>​    cd /mysql</p>
<p>ok现在来下载（用wget的形式）</p>
<p>​    wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm" target="_blank" rel="noopener">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a></p>
<p>然后是安装下载的rpm包</p>
<p>​    rpm -ivh mysql-community-release-el7-5.noarch.rpm</p>
<p>更新一下yum（如果需要的话）</p>
<p>​    yum update</p>
<p>下载安装mysql的服务</p>
<p>​    yum install mysql-server</p>
<p>修改mysql的权限</p>
<p>​    chown mysql:mysql -R /var/lib/mysql</p>
<p>初始化mysql</p>
<p>​    mysqld –initialize</p>
<p>好的一切就绪，启动mysql</p>
<p>​    systemctl start mysqld</p>
<p>查看运行状态</p>
<p>​    systemctl status mysqld</p>
<p>验证mysql的安装</p>
<p>​    mysqladmin –version</p>
<p>如果到这步一切正常，那么现在开始操作mysql进行一些基础的设置</p>
<p>修改登录密码</p>
<p>​    mysqladmin -u root password “new_password”;</p>
<p>然后以此来登录</p>
<p>​    mysql -u root -p</p>
]]></content>
  </entry>
  <entry>
    <title>servet+jsp+maven的使用</title>
    <url>/2019/11/25/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>servlet和jsp技术是java进行web开发所必学的技术，但你可能会说：servlet就算了，jsp这种完成被淘汰的技术为什么还要学习？问的好，技术都是循序渐进的，虽然他可能已经不被大众所待见，但他的编程思想以及建立在他之上的框架的设计思路不都是我们应该进行学习的原因吗。当然，我不否认他们的过时，所以本文将只对上述技术进行“浅”教程和初步的搭建运行。如有兴趣可自行深入学习。</p>
<h1 id="什么是servlet？"><a href="#什么是servlet？" class="headerlink" title="什么是servlet？"></a>什么是servlet？</h1><p> Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。<br>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。<br>通俗点说，就是一个运行在服务器上的java程序，servlet一般处理客户端发来的请求，然后进行一系列处理，并且可以向客服端发送html标签（字面意思，用输出语句发送），但因为要发送的页面标签过多，太冗余，被人们淘汰了一段时间。</p>
<h1 id="什么是jsp？"><a href="#什么是jsp？" class="headerlink" title="什么是jsp？"></a>什么是jsp？</h1><p>JSP 与 PHP、ASP、ASP.NET 等语言类似，运行在服务端的语言。JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。<br>通俗点说，就是在一个html页面里嵌入java代码，一般是对数据的逻辑处理或者是连接数据库的操作，然后这些jsp页面在运行时会被编译器转换成servlet代码（就是java代码），编译成二进制文件后运行。因为比起servlet的java代码里嵌入html标签，jsp的html标签里嵌入java代码要好的多（从感官上和可读性上来说），所以曾在一段时间里取代了servlet。</p>
<h1 id="servlet和jsp有什么关系？"><a href="#servlet和jsp有什么关系？" class="headerlink" title="servlet和jsp有什么关系？"></a>servlet和jsp有什么关系？</h1><p>在编程开发的早些年代，大都使用jsp，因为web开发无非就是画面+数据的结合，而jsp都能完成这些需求，并且比起servlet可读性要高的多，但是随着软件需求的增加和功能的复杂化，html里嵌入的java代码越来越多，可读性开始下降，所以最后演变成jsp负责开发页面，而servlet负责开发数据处理逻辑，而在之后的很长一段时间，开发流程都是前端写好静态页面，然后交给后台去扣数据，嵌入java代码，但是这很明显是高耦合的，开发效率低下，所以有了现在的前后端分离，但这就不是这篇文章讨论的问题了。</p>
<h1 id="快速搭建一个jsp-servlet项目（idea工具）"><a href="#快速搭建一个jsp-servlet项目（idea工具）" class="headerlink" title="快速搭建一个jsp+servlet项目（idea工具）"></a>快速搭建一个jsp+servlet项目（idea工具）</h1><h2 id="maven的使用"><a href="#maven的使用" class="headerlink" title="maven的使用"></a>maven的使用</h2><p>此项目的依赖管理采用maven管理工具，而maven的具体应用方法请自行百度，这里就不过多赘述（如果你用gradle也行）</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/1.png" alt="示例图片"></p>
<p>选中maven一行，next</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/2.png" alt="示例图片"></p>
<p>输入你的组和组织名称（随意）</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/3.png" alt="示例图片"></p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/3.5.png" alt="示例图片"></p>
<p>继续，如果你电脑里安装过maven，或者你想用本地库，那么就选你自己的本地库</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/4.png" alt="示例图片"></p>
<p>完成</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/5.png" alt="示例图片"></p>
<p>记得点击自动导入依赖（你不选也没事，就是要自己下载）</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/6.png" alt="示例图片"></p>
<p>配置启动的tomcat</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/7.png" alt="示例图片"></p>
<p>选中你使用的tomcat（这里博主电脑里有下好的tomcat，所以直接选择本地就可以了），其中有例如端口 运行浏览器等配置，请根据自己的情况配置</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/8.png" alt="示例图片"></p>
<p>然后将你的项目部署到tomcat上，这里不选artifact也行（选了就是以文件夹的形式运行，不选就是以war包的形式运行）</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/9.png" alt="示例图片"></p>
<p>然后就是运行了</p>
<p><img src="https://1716416169.github.io/servet+jsp+maven%E7%9A%84%E4%BD%BF%E7%94%A8/10.png" alt="示例图片"></p>
<p>ok,大功告成，一个servlet+jsp的项目已经搭建了起来</p>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
      <tags>
        <tag>jsp</tag>
        <tag>servlet</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客框架+next主题的初步使用</title>
    <url>/2019/11/23/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6-next%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://1716416169.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6+next%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/1.png" alt="实例图"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程是在博主完成配置并正确运行后才进行编写的,所以并没有配置以及运行过程的截图，本教程的执行环境是linux的centos版本</p>
<h1 id="了解hexo博客框架"><a href="#了解hexo博客框架" class="headerlink" title="了解hexo博客框架"></a>了解hexo博客框架</h1><p>字面意思，博客框架就是给了你一个博客的架子，然后你自己在根据你自己的情况或者喜好进行修改定制（注意，这里的架子并不是指给你一个静态页面然后你自己往里面写代码扣数据加数据），hexo提供了一整套标准的博客网站应该具备的所有功能，具体可通过修改配置文件或者输入相应的指令进行更改，当然，具体的可以去看官方文档（手动滑稽）</p>
<h1 id="安装hexo需要的环境"><a href="#安装hexo需要的环境" class="headerlink" title="安装hexo需要的环境"></a>安装hexo需要的环境</h1><p>安装该框架非常简单，但需要先安装node.js和git。</p>
<h2 id="安装node-js（v12-13-1）"><a href="#安装node-js（v12-13-1）" class="headerlink" title="安装node.js（v12.13.1）"></a>安装node.js（v12.13.1）</h2><p>首先百度nodejs的官网，然后找到下载页面<br><img src="https://1716416169.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6+next%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/2.png" alt="示例图"><br>下载得到的文件后缀为tar.xz,注意别下错了，得到文件后进行解压，注意这里解压的是xz文件，所以不能使用tar -zxvf</p>
<pre><code>tar -xvf node-v12.13.1-linux-x64.tar.xz</code></pre><p>然后删除压缩包，当然，你删不删都无所谓<br>因为采用的是非安装包安装的形式,所以需要手动配置环境变量</p>
<p>首先找到linux里的profile文件，然后在文件里随便一个位置加入一下配置</p>
<pre><code>export NODE_HOME=/你nodejs解压的根目录
export PATH=$PATH:$NODE_HOME/bin 
export NODE_PATH=$NODE_HOME/lib/node_modules</code></pre><p>完成后记得执行以下语句进行提交</p>
<pre><code>source 你进行修改后的profile文件</code></pre><p>最后检查你是否安装成功</p>
<pre><code>node -v
npm -v</code></pre><p>如果出现版本号则表示安装成功(注意上面两个指令都要执行)<br>至此nodejs的安装结束，当然，你也可以选择安装包的形式进行安装</p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>安装git主要是为了能够将你的hexo博客提交到GitHub上，如果你了解git pages，那么你会非常happy<br>安装git首先执行以下指令</p>
<pre><code>sudo yum install git-core</code></pre><p>然后就没有然后了，恭喜你，完成了git的安装</p>
<h1 id="开始安装hexo"><a href="#开始安装hexo" class="headerlink" title="开始安装hexo"></a>开始安装hexo</h1><p>执行</p>
<pre><code>npm install -g hexo-cli</code></pre><p>安装完毕</p>
<h1 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h1><p>安装成功后，你需要创建一个用来存储你的博客网站的文件夹，然后进到这个文件夹里执行以下指令</p>
<pre><code>hexo init
npm install</code></pre><p>执行完成后，文件夹内的结构如下：</p>
<pre><code>.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes</code></pre><p>至此，博客框架安装完成，你可以输入以下指令来启动hexo</p>
<pre><code>hexo clean</code></pre><p>这是清除hexo在linux上的缓存</p>
<pre><code>hexo s</code></pre><p>启动hexo服务<br>ok，大功告成<br>你可以输入127.0.0.1:4000来测试网站，正常情况下你会得到以下画面：</p>
<p><img src="https://1716416169.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6+next%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/3.png" alt="示例图"></p>
<h1 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h1><p>如果上述流程都没有问题，那么你已经成功获得了一个属于你自己的博客网站模板了，接下来就是对这个模板进行修改或者说定制了，是不是有点小兴奋？好的，就让我们开始吧</p>
<h2 id="站点配置文件和主题配置文件"><a href="#站点配置文件和主题配置文件" class="headerlink" title="站点配置文件和主题配置文件"></a>站点配置文件和主题配置文件</h2><p>hexo框架有两个配置文件，下面进行操作的都是hexo的站点配置文件，网站的配置文件顾名思义，就是对网站的某些数值或者功能进行配置，以达到个性化定制的结果（当然，这个定制化程度并不是太深，更多的是对标题，所属，字体等一些必要的地方进行填充）<br>首先，你需要进入hexo的根目录，进入_config.yml文件中</p>
<pre><code>vim _config.yml</code></pre><p>yml文件的格式为值键对，并且字段与值之间需要用空格隔开（yml文件使用空格，空行来表现层次关系），所以你可以看到诸如<code>title</code>,<code>subtitle</code>,<code>description</code>,<code>keywords</code>,<code>author</code>,<code>timezone</code>等字段，你也看到了，数量很多，所以这里就不一一举例，详细的可以去阅读官方文档，修改完成后记得保存</p>
<pre><code>esc
:wq</code></pre><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在启动hexo后，你一定会想如何更换背景或者主题，确实，如果大家都一样未免太过无趣，所以在hexo官方网站内提供了许多主题，值得一提的是这些主题都是许多大佬编写的。（高手在民间）</p>
<p><img src="https://1716416169.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6+next%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/4.png" alt="示例图"></p>
<p>而更换主题的方式也非常简单<br>首先进到hexo下的themes文件</p>
<pre><code>cd /hexo/themes</code></pre><p>将你从官网下载下来的主题包（从github上下载）解压后放入其中，然后记住文件夹的名字，进入hexo的_config.yml文件中修改theme字段，将后面的默认值改为主题文件夹的名字，保存退出。<br>执行以下语句重启hexo服务</p>
<pre><code>hexo clean
hexo s</code></pre><p>再次访问127.0.0.1:4000来测试</p>
<h2 id="主题的配置文件"><a href="#主题的配置文件" class="headerlink" title="主题的配置文件"></a>主题的配置文件</h2><p>上面就说过hexo的配置文件有两种，现在就是第二种：主题配置文件<br>具体的位置在你下载的主题文件根目录下（这里博主使用的是next主题，不同的主题配置方式会有差异）</p>
<pre><code>cd /hexo/themes/next/
vim _config.yml</code></pre><h3 id="auto-excerpt"><a href="#auto-excerpt" class="headerlink" title="auto_excerpt"></a>auto_excerpt</h3><p>其中有`auto_excerpt·字段，具体效果为每一篇文章只显示预览，不显示全文。<br>通过true或者false进行控制</p>
<h3 id="统计字段"><a href="#统计字段" class="headerlink" title="统计字段"></a>统计字段</h3><p>请登录<a href="https://ta.qq.com/#/" target="_blank" rel="noopener">腾讯分析</a>（百度，谷歌的都可以，随你便），登录获取id，然后在tencent_analytics字段添加id。</p>
<p>具体的操作流程其实与配置站点配置文件一样，但不同的主题可配置的字段和效果都不一样，所以这里就不再多举例，具体的请参考你所下载的主题包的相关说明</p>
<h1 id="使用hexo创建第一篇文章"><a href="#使用hexo创建第一篇文章" class="headerlink" title="使用hexo创建第一篇文章"></a>使用hexo创建第一篇文章</h1><p>说了这么多，终于开始使用你的博客网站了，既然是博客，那么文章，分类，标签，评论，站内搜索等一系列功能都不能少，确实，hexo也提供了这些功能</p>
<p>创建一篇文章<br>首先进入你hexo的根目录下</p>
<pre><code>hexo new 你的文章标题</code></pre><p>ok，控制台是不是显示建立了一个后缀为md的文件？那就是你的文章，hexo支持markdown格式，这也是程序员公认记笔记最便捷的格式，具体的学习请参考百度上的某鸟网站的markdown语法<br>打开你的文章文件后</p>
<pre><code>vim xxx.md</code></pre><p>你会看到如下内容</p>
<p><img src="https://1716416169.github.io/hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6+next%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/5.png" alt="示例图"></p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">title</td>
<td align="center">你文章的标题，会在页面中显示</td>
</tr>
<tr>
<td align="center">date</td>
<td align="center">创建这篇文章的时间，会在页面中显示，并且在历史记录中作为排序的参数</td>
</tr>
<tr>
<td align="center">tags</td>
<td align="center">这篇文章包含的标签，会在标签页面中显示，作为找到这篇文章的一个索引</td>
</tr>
<tr>
<td align="center">categories</td>
<td align="center">这篇文章的分类，会在分类页面中显示，作为找到这篇文章的一个索引</td>
</tr>
</tbody></table>
<p>请根据你的具体情况修改</p>
<h1 id="添加新页面"><a href="#添加新页面" class="headerlink" title="添加新页面"></a>添加新页面</h1><p>在打开博客网站后，你会发现分类页面，标签页面等一系列页面是空白页，这是因为hexo框架需要使用者自行配置创建一个分类页面，执行以下语句创建：</p>
<pre><code>hexo new page 你创建的新页面名称（这里使用“分类”）</code></pre><p>控制台会显示创建了一个文件夹，位于hexo根目录下的source文件夹中，hexo中的新页面是以文件夹的形式存在的，进入其中：</p>
<pre><code>cd /hexo/source/categories</code></pre><p>你会看到index.md文件，不要犹豫，进去</p>
<pre><code>vim index.md</code></pre><p>文件内容和文章初始内容其实一样，你只需要在其中加入以下内容表明这个页面的类型<br>和被赋予的功能就行：</p>
<pre><code>type: categories</code></pre><p>这表明这个新的页面是一个分类页面，能够将博客网站中的所有文章中的所有类型字段的值显示出来，并作为跳转的索引。（索引字段怎么写写在哪，具体上一节有）</p>
<p>其他的标签页面，存档页面或者是你自定义的页面也大同小异</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>那么，到这，hexo博客框架+next主题的初步使用教程就结束了，当然，本文所写的只是博主实际进行配置和运行的流程，还有许多的配置以及使用方法没有一一说明，毕竟，这真的只是一个初步教程（手动滑稽），能让你快速搭建一个你自己的博客网站，如果想深入了解，就得靠你自己的挖掘了。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2019/11/20/hello-world/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
</search>
